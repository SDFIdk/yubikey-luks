#!/bin/bash

CheckIfRoot () {
	# Check if running as root
	if [ "$EUID" != 0 ]; then
		echo "This script must run with root privileges, e.g.:"
		echo "sudo $0"
		exit 1
	fi
}


DefaultConfig () {
	#Set this in case the value is missing in /etc/ykluks.cfg
	CONCATENATE=0
	HASH=0
	WELCOME_TEXT="Please insert YubiKey and press enter or enter a valid passphrase ..."
	YUBIKEY_SLOT=2
	#YUBIKEY_CHALLENGE="YubiKey Password" Set this in /etc/ykluks.conf to enable 1FA
    LUKS_SLOT=7
    LUKS_DEVICE="/dev/sda3"
    CLEAR_SLOT=0
    DBG=0


	if [ -f /etc/ykluks.cfg ]
	then
		. /etc/ykluks.cfg
	fi
}

CheckDependencies () {
	if ! command -v cryptsetup &> /dev/null
	then
		echo "cryptsetup-bin could not be found"
		echo "Please install it with"
		echo "apt-get install cryptsetup-bin"
		exit 1
	fi

	if ! command -v mkinitramfs &> /dev/null
	then
		echo "mkinitramfs could not be found"
		echo "Please install it with"
		echo "apt-get install initramfs-tools-core"
		exit 1
	fi

	if ! command -v ykpersonalize &> /dev/null
	then
		echo "ykpersonalize could not be found"
		echo "Please install it with"
		echo "apt-get install yubikey-personalization"
		exit 1
	fi

	if ! command -v yubikey-luks-enroll &> /dev/null
	then
		echo "yubikey-luks-enroll could not be found"
		echo "Please install it with"
		echo "apt-get install yubikey-luks"
		exit 1
	fi

	if ! command -v sed &> /dev/null
	then
		echo "sed could not be found"
		echo "Please install it with"
		echo "apt-get install sed"
		exit 1
	fi
}

ArgumentHandeling () {
    while getopts ":s:d:y:p:hcv" opt
    do
        case $opt in
            s)
                LUKS_SLOT=$OPTARG
                echo "setting slot to $OPTARG."
                ;;
            d)
                LUKS_DEVICE=$OPTARG
                echo "setting disk to $OPTARG."
                ;;
            y)
                if [ ! "$YUBIKEY_SLOT" = "$OPTARG" ]
                then
                    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                    echo "WARNING: You are enrolling slot $OPTARG of your yubikey."
                    echo "During boot, slot $YUBIKEY_SLOT is configured to be used (/etc/ykluks.cfg)."
                    echo "You will therefore not be able to boot using this setup!"
                    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                fi
                YUBIKEY_SLOT=$OPTARG
                echo "setting yubikey slot to $OPTARG."
                ;;
            p)
                if [ -f "$OPTARG" ]
                then
                    LUKS_PASSWORD=$(echo -n "$OPTARG")
                    echo "Reading LUKS password from $OPTARG."
                else
                    echo "LUKS password file not found"
                    exit 1
                fi
                ;;
            c)
                CLEAR_SLOT=1
                echo "clearing slot"
                ;;
            v)  DBG=1
                echo "debugging enabled"
                ;;
            h)
                echo
                echo " -d <partition>: set the partition (Default=Auto Detect"
                echo " -s <slot>     : set the LUKS slot (Default=Auto Detect)"
                echo " -y <slot>     : set the yubikey slot to use (Default=2)"
                echo " -p <file>     : file that contain LUKS password"
                echo " -c            : clear the slot prior to writing"
                echo " -v            : show input/output in cleartext"
                echo
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                ;;
        esac
    done
}

ClearLuksSlot () {
    echo "This script will utilize the YubiKey slot $YUBIKEY_SLOT for slot $LUKS_SLOT on drive $LUKS_DEVICE.  If this is not what you intended, exit now!"

    if [ "$CLEAR_SLOT" = "1" ]
    then
        echo "Killing LUKS slot $LUKS_SLOT"
        cryptsetup luksKillSlot "$LUKS_DEVICE" "$LUKS_SLOT"
    fi
}

LuksPassword () {
    if [ -z "$LUKS_PASSWORD" ]
    then
        LUKS_PASSWORD=$(/lib/cryptsetup/askpass "Please provide an existing passphrase to LUKS. This is NOT the passphrase you just entered, this is the passphrase that you currently use to unlock your LUKS encrypted drive:")
        if [ "$DBG" = "1" ]
        then
            echo "LUKS passphrase: $LUKS_PASSWORD"
        fi
    fi
}

YubiKeyDetect () {
while true
do
    if lsusb | grep -iq 'yubico'
    then
        break
    fi
    read -n 1 -s -r -p "Please insert YubiKey and press any key."
    echo ""
done
}

YubiKeyChallenge () {
    # Ask for password if 1FA is not configured
    if [ -z "$YUBIKEY_CHALLENGE" ]
    then
        YUBIKEY_CHALLENGE=$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password. This is the password that will only work while your yubikey is installed in your computer:")
        if [ "$DBG" = "1" ]
        then
            echo "Password: $YUBIKEY_CHALLENGE"
        fi

        if [ "$YUBIKEY_CHALLENGE" != "$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password again:")" ]
        then
            echo "Passwords do not match"
            exit 1
        fi
    fi
}

YubiKeyHash () {
    if [ "$HASH" = "1" ]
    then
        YUBIKEY_CHALLENGE=$(echo -n "$YUBIKEY_CHALLENGE" | sha256sum | awk '{print $1}')
        if [ "$DBG" = "1" ]
        then
            echo "Password hash: $YUBIKEY_CHALLENGE"
        fi
    fi
}

YubiKeyResponce () {
    YUBIKEY_RESPONCE="$(echo -n "$YUBIKEY_CHALLENGE" | ykchalresp -"$YUBIKEY_SLOT" -i- 2>/dev/null || true)"
    if [ "$DBG" = "1" ]
    then
        echo "Yubikey response: $YUBIKEY_RESPONCE"
    fi

    if [ -z "$YUBIKEY_RESPONCE" ]
    then
        echo "Yubikey not available or timed out waiting for button press"
        exit 1
    fi
}

LuksAddKey () {
    if [ "$CONCATENATE" = "1" ]
    then
        printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$LUKS_DEVICE" 2>&1;
        if [ "$DBG" = "1" ]
        then
            echo "LUKS key: $YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE"
        fi
    else
        printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_RESPONCE" "$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$LUKS_DEVICE" 2>&1;
        if [ "$DBG" = "1" ]
        then
            echo "LUKS key: $YUBIKEY_RESPONCE"
        fi
    fi
}


# Fail if not run as ROOT
CheckIfRoot

DefaultConfig

# Check that the required apps are installed
CheckDependencies

ArgumentHandeling "$@"
ClearLuksSlot

# Check if YubiKey is present

YubiKeyDetect
YubiKeyChallenge
YubiKeyHash
YubiKeyResponce
LuksPassword
LuksAddKey
exit 0
