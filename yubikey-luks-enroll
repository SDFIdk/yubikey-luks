#!/bin/bash

CheckIfRoot () {
    # Check if running as root
    if [ "$EUID" != 0 ]; then
        echo "This script must run with root privileges, e.g.:"
        echo "sudo $0"
        exit 1
    fi
}


DefaultConfig () {
    #Set this in case the value is missing in /etc/ykluks.cfg
    CONCATENATE=0
    HASH=0
    #WELCOME_TEXT="Please insert YubiKey and press enter or enter a valid passphrase ..."
    YUBIKEY_SLOT=2
    #YUBIKEY_CHALLENGE="YubiKey Password" Set this in /etc/ykluks.conf to enable 1FA
    CLEAR_SLOT=0

    if [ -f /etc/ykluks.cfg ]
    then
        # shellcheck source=ykluks.cfg
        . /etc/ykluks.cfg
    fi
}

CheckDependencies () {
    if ! command -v cryptsetup &> /dev/null
    then
        echo "cryptsetup-bin could not be found"
        echo "Please install it with"
        echo "apt-get install cryptsetup-bin"
        exit 1
    fi

    if ! command -v mkinitramfs &> /dev/null
    then
        echo "mkinitramfs could not be found"
        echo "Please install it with"
        echo "apt-get install initramfs-tools-core"
        exit 1
    fi

    if ! command -v ykpersonalize &> /dev/null
    then
        echo "ykpersonalize could not be found"
        echo "Please install it with"
        echo "apt-get install yubikey-personalization"
        exit 1
    fi

    if ! command -v sed &> /dev/null
    then
        echo "sed could not be found"
        echo "Please install it with"
        echo "apt-get install sed"
        exit 1
    fi
}

ArgumentHandeling () {
    while getopts ":s:d:y:p:hcv1" opt
    do
        case $opt in
            s)
                LUKS_SLOT=$OPTARG
                echo "setting slot to $OPTARG."
                ;;
            d)
                LUKS_DEVICE=$OPTARG
                echo "setting device to $OPTARG."
                ;;
            y)
                if [ ! "$YUBIKEY_SLOT" = "$OPTARG" ]
                then
                    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                    echo "WARNING: You are enrolling slot $OPTARG of your yubikey."
                    echo "During boot, slot $YUBIKEY_SLOT is configured to be used (/etc/ykluks.cfg)."
                    echo "You will therefore not be able to boot using this setup!"
                    echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                fi
                YUBIKEY_SLOT=$OPTARG
                echo "setting yubikey slot to $OPTARG."
                ;;
            p)
                if [ -f "$OPTARG" ]
                then
                    LUKS_PASSWORD=$(echo -n "$OPTARG")
                    echo "Reading LUKS password from $OPTARG."
                else
                    echo "LUKS password file not found"
                    exit 1
                fi
                ;;
            1)
                # Enable 1FA in /etc/ykluks.cfg
                ENABLE_1FA=true
                ;;
            c)
                CLEAR_SLOT=1
                echo "clearing slot"
                ;;
            v)  DEBUG=true
                echo "debugging enabled"
                ;;
            h)
                echo
                echo " -d <partition>: set the partition (Default=Auto Detect"
                echo " -s <slot>     : set the LUKS slot (Default=Auto Detect)"
                echo " -y <slot>     : set the yubikey slot to use (Default=2)"
                echo " -p <file>     : file that contain LUKS password"
                echo " -1            : Enable 1FA in /etc/ykluks.cfg"
                echo " -c            : clear the slot prior to writing"
                echo " -v            : show input/output in cleartext"
                echo
                exit 1
                ;;
            \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
        esac
    done
}

LuskDeviceFind () {
    if [ -n "$LUKS_DEVICE" ]
    then
        return
        # we already have a device
    fi

    CRYPTTAB_VOLUME=$(head --lines=1 /etc/crypttab | awk '{print $1}')
    if [ -z "$CRYPTTAB_VOLUME" ]
    then
        echo "No Encrypted device found"
        echo "couldn't find one on the first line of /etc/crypttab."
        echo "Exiting with no changes made to the system."
        exit 1
    fi
    LUKS_DEVICE=$(cryptsetup status "$CRYPTTAB_VOLUME" | awk '/device:/ {print $2}')
}

LuskDeviceCheck () {
    if cryptsetup isLuks "$LUKS_DEVICE"
    then
        echo "Using \"$LUKS_DEVICE\", which appears to be a valid LUKS encrypted device..."
    else
        echo "Device \"$LUKS_DEVICE\" does not appear to be a valid LUKS encrypted device."
        exit 1
    fi
}

# Must be called after LuskSlotClear
LuksCheckSlot () {
    if [ -z "$LUKS_SLOT" ]
    then
        return
    fi

    if cryptsetup luksDump "$LUKS_DEVICE" | grep -q "$LUKS_SLOT: luks2"
    then
        echo "Slot already in use: $LUKS_SLOT"
        exit 1
    fi
}

LuksFindFreeSlot () {
    if [ -n "$LUSK_SLOT" ]
    then
        # User have manaly selectet a slot with -s option
        return
    fi

    # List of Slots that are in use
    SlotsInUse=$(cryptsetup luksDump "$LUKS_DEVICE" | grep ": luks2" | cut -d ":" -f 1 | awk '{print $1}'|tr -d '\n')

    # Travers all 8 slots until you find one that is not un use
    for SLOT in {0..7}
    do
        if echo "$SlotsInUse" | grep -q -F -v "$SLOT"
        then
            LUKS_SLOT=$SLOT
            return
        fi
    done

    echo "All Luks slots are in use"
    exit 1
}

LuskSlotClear () {
    echo "This script will utilize the YubiKey slot $YUBIKEY_SLOT for slot $LUKS_SLOT on device $LUKS_DEVICE.  If this is not what you intended, exit now!"

    if [ "$CLEAR_SLOT" = "1" ]
    then
        echo "Killing LUKS slot $LUKS_SLOT"
        cryptsetup luksKillSlot "$LUKS_DEVICE" "$LUKS_SLOT"
    fi
}

LuksPassword () {
    if [ -z "$LUKS_PASSWORD" ]
    then
        LUKS_PASSWORD=$(/lib/cryptsetup/askpass "Please provide an existing passphrase to LUKS. This is NOT the passphrase you just entered, this is the passphrase that you currently use to unlock your LUKS encrypted device:")
        if [ -n "$DEBUG" ]
        then
            echo "LUKS passphrase: $LUKS_PASSWORD"
        fi
    fi
}

LuksAddYubiKey () {
    if [ "$CONCATENATE" = "1" ]
    then
        printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$LUKS_DEVICE" 2>&1;
        if [ -n "$DEBUG" ]
        then
            echo "LUKS key: $YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE"
        fi
    else
        printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_RESPONCE" "$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$LUKS_DEVICE" 2>&1;
        if [ -n "$DEBUG" ]
        then
            echo "LUKS key: $YUBIKEY_RESPONCE"
        fi
    fi
}

YubiKeyInit () {
    ykpersonalize -y -"$YUBIKEY_SLOT" -ochal-resp -ochal-hmac -ohmac-lt64 -oserial-api-visible > /dev/null 2>&1
}

YubiKeyDetect () {
    while true
    do
        if lsusb | grep -iq 'yubico'
        then
            break
        fi

        read -n 1 -s -r -p "Please insert YubiKey and press any key."
        echo
    done
}

YubiKeyLuksCheck () {
    echo "Check where the YubiKey 1FA already exist in LUKS"
    echo

    if [ -z "$YUBIKEY_CHALLENGE" ]
    then
        # 1FA not enabled
        return
    fi

    if echo -n "$YUBIKEY_CHALLENGE" | ykchalresp -"$YUBIKEY_SLOT" -i- | cryptsetup open --test-passphrase "$LUKS_DEVICE"
    then
        echo "The YubiKey 1FA is enabled to Decrypt $LUKS_DEVICE"
        exit
    fi
}

YubiKeyChallenge () {
    # Ask for password if 1FA is not configured
    if [ -z "$YUBIKEY_CHALLENGE" ]
    then
        YUBIKEY_CHALLENGE=$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password. This is the password that will only work while your yubikey is installed in your computer:")
        if [ -n "$DEBUG" ]
        then
            echo "Password: $YUBIKEY_CHALLENGE"
        fi

        if [ "$YUBIKEY_CHALLENGE" != "$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password again:")" ]
        then
            echo "Passwords do not match"
            exit 1
        fi
    fi
}

YubiKeyHash () {
    if [ "$HASH" = "1" ]
    then
        YUBIKEY_CHALLENGE=$(echo -n "$YUBIKEY_CHALLENGE" | sha256sum | awk '{print $1}')
        if [ -n "$DEBUG" ]
        then
            echo "Password hash: $YUBIKEY_CHALLENGE"
        fi
    fi
}

YubiKeyResponce () {
    YUBIKEY_RESPONCE="$(echo -n "$YUBIKEY_CHALLENGE" | ykchalresp -"$YUBIKEY_SLOT" -i- 2>/dev/null || true)"
    if [ -n "$DEBUG" ]
    then
        echo "Yubikey response: $YUBIKEY_RESPONCE"
    fi

    if [ -z "$YUBIKEY_RESPONCE" ]
    then
        echo "Yubikey not available or timed out waiting for button press"
        exit 1
    fi
}

YubiKeyEnable1FA () {
    # Check where ENABLE_1FA is set and YUBIKEY_CHALLENGE was not importet from /etc/ykluks.cfg
    if [ -z "$ENABLE_1FA" ] && [ -n "$YUBIKEY_CHALLENGE" ]
    then
        return
    fi

    YUBIKEY_CHALLENGE=$(openssl rand -base64 32)
    sed 's/# $YUBIKEY_CHALLENGE="password"/YUBIKEY_CHALLENGE="$YUBIKEY_CHALLENGE"/g' /etc/ykluks.cfg
}

YubiKeyUpdateConfig () {
    if ! grep -F "YUBIKEY_$YUBIKEY_SERIAL" /etc/ykluks.cfg
    then
        echo "YUBIKEY_$YUBIKEY_SERIAL=$YUBIKEY_SLOT" >> /etc/ykluks.cfg
    fi

    if ! grep -F "YUBIKEY_SLOT" /etc/ykluks.cfg
    then
        echo "YUBIKEY_SLOT=$YUBIKEY_SLOT" >> /etc/ykluks.cfg
    fi
}

YubiKeyCrypttab () {
    if [ -z "$CRYPTTAB_VOLUME" ]
    then 
        echo "Please update /etc/crypttab to include this"
        echo "In order to use yubikey-luks for unlocking LUKS encrypted volume at boot you must append"
        echo "keyscript=/usr/share/yubikey-luks/ykluks-keyscript to the /etc/crypttab file."
        echo "Example:"
        echo "cryptroot /dev/sda none  luks,keyscript=/usr/share/yubikey-luks/ykluks-keyscript"
        echo "After changing this file, you need to run"
        echo "update-initramfs -u"
        exit
    fi

    if grep -F -q ykluks-keyscript /etc/crypttab
    then
        echo "/etc/crypttab already has an entry for ykluks-keyscript"
        if grep -F ykluks-keyscript /etc/crypttab|grep -q "$CRYPTTAB_VOLUME"
        then
            echo "No changes needed"
            exit
        else
            echo "ERROR: please manualy check that it is correct"
            echo "# e.g. this line: $CRYPTTAB_VOLUME UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX none luks,discard"
            echo "# should become : $CRYPTTAB_VOLUME UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX none luks,discard,keyscript=/usr/share/yubikey-luks/ykluks-keyscript"
            echo "After changing this file, you need to run"
            echo "update-initramfs -u"
            exit 1
        fi
    fi

    # This will only update the first line of /etc/crypttab.  If multiple updates are needed, they must be done manually.
    if [ "$(wc -l < /etc/crypttab)" -gt 1 ]
    then
        echo "This section only update the first line of /etc/crypttab. It seems there are multiple lines, so please update the file manually."
        echo "# e.g. this line: $CRYPTTAB_VOLUME UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX none luks,discard"
        echo "# should become : $CRYPTTAB_VOLUME UUID=XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX none luks,discard,keyscript=/usr/share/yubikey-luks/ykluks-keyscript"
        echo "After changing this file, you need to run"
        echo "update-initramfs -u"
        exit 1
    fi

    # Updating /etc/crypttab
    sed -i 's%$%,keyscript=/usr/share/yubikey-luks/ykluks-keyscript%' /etc/crypttab

    # Updating initramfs
    update-initramfs -u
}

# Fail if not run as ROOT
CheckIfRoot

# Set default variables
DefaultConfig

# Check that the required apps are installed
CheckDependencies

# Handle user options
ArgumentHandeling "$@"

# Clear slot before we check if it is free
LuskSlotClear

# If -d ioption is not used auto detect device
LuskDeviceFind

# Check if LUSK_DEVICE is valid
LuskDeviceCheck

# Check if Slot is in use
LuksCheckSlot

# If -s LUSK_SLOT is not definde find a free slot
LuksFindFreeSlot

# If -1 "1FA" is enable update /etc/ykluks.cfg with YUBIKEY_CHALLENGE
YubiKeyEnable1FA

# Check if YubiKey is present
YubiKeyDetect

# Check if YubiKey can decrypt LUKS device
YubiKeyLuksCheck

# Ask user to create a passfrase if 1FA is not enabled
YubiKeyChallenge

# Hash Password if enabled in config
YubiKeyHash

# Get Responce to Challenge from YubiKey
YubiKeyResponce

# Ask User user for Password to unlock Lusk device
LuksPassword

# Add YubiKey Responce to Lusk device
LuksAddYubiKey

# Update crypttab and initramfs
YubiKeyCrypttab

exit
