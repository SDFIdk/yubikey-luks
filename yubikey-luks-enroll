#!/bin/sh
LUKS_SLOT=7
DISK="/dev/sda3"
CLEAR_SLOT=0
DBG=0
YUBIKEY_SLOT=2 #Set this in case the value is missing in /etc/ykluks.cfg


set -e
. /etc/ykluks.cfg

if [ "$(id -u)" -ne 0 ]
then
    echo "You must be root." 1>&2
    exit 1
fi

while getopts ":s:d:y:p:hcv" opt
do
    case $opt in
        s)
            LUKS_SLOT=$OPTARG
            echo "setting slot to $OPTARG."
            ;;
        d)
            DISK=$OPTARG
            echo "setting disk to $OPTARG."
            ;;
        y)
            if [ ! "$YUBIKEY_SLOT" = "$OPTARG" ]
            then
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
                echo "WARNING: You are enrolling slot $OPTARG of your yubikey."
                echo "During boot, slot $YUBIKEY_SLOT is configured to be used (/etc/ykluks.cfg)."
                echo "You will therefore not be able to boot using this setup!"
                echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            fi
            YUBIKEY_SLOT=$OPTARG
            echo "setting yubikey slot to $OPTARG."
            ;;
        p)
            if [ -f "$OPTARG" ]
            then
                LUKS_PASSWORD=$(echo -n "$OPTARG")
                echo "Reading LUKS password from $OPTARG."
            else
                echo "LUKS password file not found"
                exit 1
            fi
            ;;
        c)
            CLEAR_SLOT=1
            echo "clearing slot"
            ;;
        v)  DBG=1
            echo "debugging enabled"
            ;;
        h)
            echo
            echo " -d <partition>: set the partition (Default=Auto Detect"
            echo " -s <slot>     : set the LUKS slot (Default=Auto Detect)"
            echo " -y <slot>     : set the yubikey slot to use (Default=2)"
            echo " -p <file>     : file that contain LUKS password"
            echo " -c            : clear the slot prior to writing"
            echo " -v            : show input/output in cleartext"
            echo
            exit 1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
    esac
done

echo "This script will utilize the YubiKey slot $YUBIKEY_SLOT for slot $LUKS_SLOT on drive $DISK.  If this is not what you intended, exit now!"

if [ "$CLEAR_SLOT" = "1" ]
then
    echo "Killing LUKS slot $LUKS_SLOT"
    cryptsetup luksKillSlot "$DISK" "$LUKS_SLOT"
fi

echo "Adding yubikey to initrd"

while true
do
    if lsusb | grep -iq 'yubico'
    then
        break
    fi
    printf "Please insert a yubikey and press enter."
    read -r _ <&1
done

# Ask for password if 1FA is not configured
if [ -z "$YUBIKEY_CHALLENGE" ]
then
    YUBIKEY_CHALLENGE=$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password. This is the password that will only work while your yubikey is installed in your computer:")
if [ "$DBG" = "1" ]
then
        echo "Password: $YUBIKEY_CHALLENGE"
fi

    if [ "$YUBIKEY_CHALLENGE" != "$(/lib/cryptsetup/askpass "Please enter the yubikey challenge password again:")" ]
then
    echo "Passwords do not match"
    exit 1
    fi
fi

if [ "$HASH" = "1" ]
then
    YUBIKEY_CHALLENGE=$(printf %s "$YUBIKEY_CHALLENGE" | sha256sum | awk '{print $1}')
    if [ "$DBG" = "1" ]
    then
        echo "Password hash: $YUBIKEY_CHALLENGE"
    fi
fi

YUBIKEY_RESPONCE="$(printf %s "$YUBIKEY_CHALLENGE" | ykchalresp -"$YUBIKEY_SLOT" -i- 2>/dev/null || true)"
if [ "$DBG" = "1" ]
then
    echo "Yubikey response: $YUBIKEY_RESPONCE"
fi

if [ -z "$YUBIKEY_RESPONCE" ]
then
    echo "Yubikey not available or timed out waiting for button press"
    exit 1
fi

if [ -z "$LUKS_PASSWORD" ]
then
    LUKS_PASSWORD=$(/lib/cryptsetup/askpass "Please provide an existing passphrase to LUKS. This is NOT the passphrase you just entered, this is the passphrase that you currently use to unlock your LUKS encrypted drive:")
if [ "$DBG" = "1" ]
then
        echo "LUKS passphrase: $LUKS_PASSWORD"
    fi
fi

if [ "$CONCATENATE" = "1" ]
then
    printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" "$YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$DISK" 2>&1;
    if [ "$DBG" = "1" ]
    then
        echo "LUKS key: $YUBIKEY_CHALLENGE$YUBIKEY_RESPONCE"
    fi
else
    printf '%s\n' "$LUKS_PASSWORD" "$YUBIKEY_RESPONCE" "$YUBIKEY_RESPONCE" | cryptsetup --key-slot="$LUKS_SLOT" luksAddKey "$DISK" 2>&1;
    if [ "$DBG" = "1" ]
    then
        echo "LUKS key: $YUBIKEY_RESPONCE"
    fi
fi

exit 0
